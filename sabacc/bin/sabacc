#!/usr/bin/env python

# Sabacc -- an interesting card game similar to Blackjack.
# Copyright (C) 2007-2008 Joel Cross.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""
Sabacc caller script (taken from version 0.6 'Ackbar')
This is the application caller, that imports all packages
and loads the initial window.
"""

import sys
import os.path
from getopt import getopt, GetoptError

def main():
	from exceptions import AssertionError
	PYTHON_VERSION = sys.version_info[:2]
	
	# Some version dependencies.
	PYTHON_REQUIRED = (2, 5)
	PYGTK_REQUIRED = '2.0'
	PYXML_REQUIRED = '0.8.4'
	
	# Get arguments
	try:
		optlist, args = getopt(sys.argv[1:], '', ['local', 'no-gui'])
	except GetoptError:
		# print usage message and exit
		usage="\nUsage: "+sys.argv[0]+''' [OPTIONS]
	--local		Force Sabacc to use local Python packages.
	--no-gui	Do not use the GTK graphical user interface. Instead
			use a text-based interface. This is the default for
			those environments where PyGTK is not installed or is
			not the correct version.
'''
		sys.stderr.write(usage+"\n")
		sys.exit(2)
	local = nogui = False
	
	for option in optlist:
		# determine methods from arguments
		if option[0] == '--local':
			local = True
		elif option[0] == '--no-gui':
			nogui = True
	
	# Check version requirements.
	if PYTHON_VERSION < PYTHON_REQUIRED:
		sys.stderr.write("python\n")
		raise SystemExit, "Error: Python %d.%d+ required" % PYTHON_REQUIRED
		
	if nogui == False:
		try:
			import pygtk
			pygtk.require(PYGTK_REQUIRED)
			import gtk
		except ImportError, AssertionError: # PyGTK not found or wrong version
			sys.stderr.write("pygtk\n")
			print "PyGTK %s+ is required for the graphical interface, but it was not found. Using 'no-gui' option..." % PYGTK_REQUIRED
			nogui=True
	
	try:
		from xml import __version__
		
		if __version__ != PYXML_REQUIRED:
			raise SystemExit, "Error: PyXML %s required - version %s found." %(PYXML_REQUIRED, __version__)
		del(__version__)
	except ImportError: # PyXML not found or wrong version
		raise SystemExit, "Error: PyXML %s required" % PYXML_REQUIRED
	
	if not local:
		try: # If Sabacc is installed system-wide, this finds it automatically.
			import sabacc.front
		except ImportError: # Locate the Sabacc package.
			local = True
	
	# Use local source files
	if local: # not 'else'!!
		currentdir = os.path.dirname(os.path.abspath(sys.argv[0]))
		basedir = os.path.abspath(os.path.join(currentdir, '..'))
		
		# The package path should be relative to the base directory.
		if os.path.exists(os.path.join(basedir, 'lib', 'python')):
			pythonpath = os.path.join(basedir, 'lib', 'python')
		else:
			pythonpath = basedir
		sys.path.insert(0, pythonpath)  # Place Sabacc package in PYTHONPATH.
		try:
			import sabacc.front
		except ImportError:
			raise SystemExit, "Fatal error: could not locate Sabacc installation."
	
	if nogui: # use text-based interface
		from sabacc.front import txtInterface
		interface = txtInterface
	
	else: # use GTK GUI
		from sabacc.front import guiInterface
		interface = guiInterface
	
	try:
		interface.start_app()
	except KeyboardInterrupt:
		raise SystemExit, "CTRL-C pressed. Exiting..."
	
	sys.exit()
	
if __name__ == "__main__":
	main()
