#!/usr/bin/env python

# Sabacc -- an interesting card game similar to Blackjack.
# Copyright (C) 2007-2008 Joel Cross.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""
Sabacc caller script (taken from Sabacc version 1.0-beta1)
This is the application caller, that imports all packages
and loads the initial window.
"""

import sys
import os.path
from getopt import getopt, GetoptError

import gettext; _=gettext.gettext # gettext for translations

def main():
	from exceptions import AssertionError
	PYTHON_VERSION = sys.version_info[:2]

	# Some version dependencies.
	PYTHON_REQUIRED = (2, 5)
	PYGTK_REQUIRED = '2.0'
	OBJC_REQUIRED = (2, 0, 1)
	ETREE_REQUIRED = (1, 3, 6)

	# Get arguments
	try:
		optlist, args = getopt(sys.argv[1:], '', ['local', 'force-gtk', 'force-objc'])
	except GetoptError:
		# print usage message and exit
		usage=_("\nUsage: ")+sys.argv[0]+_(''' [OPTIONS]
	--local		Force Sabacc to use local Python packages.
	--force-gtk	Force Sabacc to use GTK rather than ObjC for graphics.
	--force-objc	Force Sabacc to use ObjC rather than GTK for graphics.
Please note that using both --force-gtk and --force-objc options will cause
Sabacc to return an error.
''')
		sys.stderr.write(usage+"\n")
		sys.exit(2)
	local = force_gtk = force_objc = default_to_objc = False

	for option in optlist:
		# determine methods from arguments
		if option[0] == '--local':
			local = True
		elif option[0] == '--force-gtk':
			force_gtk = True
		elif option[0] == '--force-objc':
			force_objc = True

	if force_gtk and force_objc:
		raise SystemExit, _("Error: You cannot use --force-gtk and --force-objc options together!")

	# Check version requirements.
	if PYTHON_VERSION < PYTHON_REQUIRED:
		raise SystemExit, _("Error: Python %d.%d+ required") % PYTHON_REQUIRED

	if force_objc or not force_gtk and sys.platform == 'darwin':
		default_to_objc = True

	if default_to_objc:
		if check_for_objc(OBJC_REQUIRED):
			use_objc = True
		else:
			if force_objc:
				raise SystemExit, _("Error: Objective-C libraries version %i.%i.%i or above required.") % OBJC_REQUIRED
			else:
				sys.stderr.write('%s %s\n' %(_("Objective-C libraries not found or wrong version."), _("Trying PyGTK...")))
				if check_for_pygtk(PYGTK_REQUIRED):
					use_objc = False
				else:
					sys.stderr.write('%s\n' %_("PyGTK not found or wrong version."))
					raise SystemExit, _("Error: No GUI library found.")

	else: # default to GTK
		if check_for_pygtk(PYGTK_REQUIRED):
			use_objc = False
		else:
			if force_gtk:
				raise SystemExit, _("Error: PyGTK version %s or above required.") % PYGTK_REQUIRED
			else:
				sys.stderr.write('%s %s\n' %(_("PyGTK not found or wrong version."), _("Trying Objective-C...")))
				if check_for_objc(OBJC_REQUIRED):
					use_objc = True
				else:
					sys.stderr.write('%s\n' %_("Objective-C libraries not found or wrong version."))
					raise SystemExit, _("Error: No GUI library found.")

	# Now we check the lxml.etree version
	etree_req_string = '%i.%i.%i' %ETREE_REQUIRED
	try:
		from lxml import etree

	except ImportError: # lxml.etree not found or wrong version
		raise SystemExit, _("Error: lxml.etree %s required") % etree_req_string

	else: # Check that lxml.etree is correct version
		if not check_required_version(ETREE_REQUIRED, etree.__version__):
			raise SystemExit, _("Error: lxml.etree %s or above required - version %s found.") %(etree_req_string, etree.__version__)

	if not local:
		try: # If Sabacc is installed system-wide, this finds it automatically.
			import sabacc.front
		except ImportError: # Locate the Sabacc package.
			local = True

	# Use local source files
	if local: # not 'else'!!
		currentdir = os.path.dirname(os.path.abspath(sys.argv[0]))
		basedir = os.path.abspath(os.path.join(currentdir, '..'))

		# The package path should be relative to the base directory.
		if os.path.exists(os.path.join(basedir, 'lib', 'python')):
			pythonpath = os.path.join(basedir, 'lib', 'python')
		else:
			pythonpath = basedir
		sys.path.insert(0, pythonpath)  # Place Sabacc package in PYTHONPATH.
		try:
			import sabacc.front
		except ImportError:
			raise SystemExit, _("Fatal error: could not locate Sabacc installation.")

	if use_objc:
		from sabacc.front import sabacc_objc
		interface = sabacc_objc

	else: # use GTK GUI
		from sabacc.front import guiInterface
		interface = guiInterface

	try:
		interface.start_app()
	except KeyboardInterrupt:
		raise SystemExit, _("CTRL-C pressed. Exiting...")

	sys.exit()

def check_required_version(required, current):
	'''This function takes in a tuple containing the required version and a
	string containing the actual version of the library in question. It will
	then compare the versions and return true or False depending on whether
	the requirements are met.'''

	version_tuple = map(int, str.split(str.split(str(current))[0], '.'))

	# Only check minor versions if major versions are the same
	for index in range(len(version_tuple)):
		if version_tuple[index] > required[index]:
			break
		elif version_tuple[index] < required[index]:
			return False
	return True

def check_for_objc(required):
	'''Checks for the presence of the Objective-C libraries, then checks their
	version.'''

	try:
		import objc
	except ImportError:
		return False
	else:
		return check_required_version(required, objc.__version__)

def check_for_pygtk(required):
	'''Checks for the presence of the PyGTK library, then checks its version.'''

	try:
		import pygtk
		pygtk.require(required)
	except ImportError, AssertionError: # PyGTK not found or wrong version
		return False
	else:
		return True

if __name__ == "__main__":
	main()
